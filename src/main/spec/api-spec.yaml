openapi: 3.0.3
info:
  description: |-
    This defines the API of the GPS-Tools backend based on the OpenAPI 3.0 specification.

    Used by these applications:
    - [GPS-Tools backend](https://github.com/devshred/gps-tools-backend)
    - [GPS-Tools frontend](https://github.com/devshred/gps-tools-frontend)
  version: 1.1.0
  title: GPS-Tools API - OpenAPI 3.0
servers:
  - url: 'http://localhost:7001/api/v1'
    description: local
tags:
  - name: tracks
    description: API to work on GPS-tracks.
  - name: points
    description: API to work on waypoints of a GPS-tracks.
  - name: server
    description: Server-related info.
paths:
  /tracks/{trackId}:
    get:
      tags:
        - tracks
      summary: Get a track by UUID.
      operationId: download
      parameters:
        - name: trackId
          in: path
          description: The UUID of the track you are looking for.
          required: true
          schema:
            type: string
            format: uuid
        - name: mode
          in: query
          description: >
            Available Modes:
             * `dl` - Forcing download (via Content-Disposition)
             * `opt` - Optimize waypoints
          schema:
            type: array
            items:
              type: string
              enum:
                - dl
                - opt
        - name: name
          in: query
          description: >
            Name of the track (Base64 encoded!):
             * used as filename
             * used as trackname in GPS-data
          schema:
            type: string
            example: U2FtcGxlIFRyYWNr
        - name: type
          in: query
          description: >
            Available types:
             * `gpx` - GPX (GPS Exchange Format)
             * `tcx` - TCX (Training Center XML)
             * `fit` - FIT (Flexible and Interoperable Data Transfer)
             * `json` - GeoJSON
          schema:
            type: string
            enum:
              - gpx
              - tcx
              - fit
              - json
        - name: wp
          in: query
          description: Waypoints as GeoJSON/FeatureCollection, Base64-encoded
          schema:
            type: string
        - name: accept
          in: header
          description: Requested track type. Can be used instead of `type`.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/gpx+xml:
              schema:
                type: string
                format: binary
            application/vnd.garmin.tcx+xml:
              schema:
                type: string
                format: binary
            application/geo+json:
              schema:
                type: string
                format: binary
        400:
          description: Bad request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem400BadRequest'
        404:
          description: Track not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem404NotFound'
        500:
          description: Server error.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem500InternalServerError'
    patch:
      tags:
        - tracks
      summary: Changes the name of a track.
      operationId: changeName
      parameters:
        - name: trackId
          in: path
          description: The UUID of the track to be deleted.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                properties:
                  type: object
                  properties:
                    name:
                      type: string
            example: >
              {
                "properties": {
                  "name": "new name of the track"
                }
              }
      responses:
        204:
          description: Successful operation.
        404:
          description: Track not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem404NotFound'
        500:
          description: Server error.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem500InternalServerError'

    delete:
      tags:
        - tracks
      summary: Delete a track by UUID.
      operationId: delete
      parameters:
        - name: trackId
          in: path
          description: The UUID of the track to be deleted.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Successful operation.
        404:
          description: Track not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem404NotFound'
        500:
          description: Server error.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem500InternalServerError'
  /tracks:
    post:
      tags:
        - tracks
      summary: Upload GPS files.
      operationId: uploadFiles
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        400:
          description: Bad request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem400BadRequest'
        413:
          description: Uploaded file too large.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem413PayloadTooLarge'
        500:
          description: Server error.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem500InternalServerError'
  /merge:
    post:
      tags:
        - tracks
      summary: Merge the given tracks.
      operationId: merge
      parameters:
        - name: trackIds
          in: query
          description: The UUIDs of the tracks you want to merge.
          required: true
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        200:
          description: Only one trackId was provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        201:
          description: Merged the given tracks successfully.
          headers:
            Location:
              description: URL to the merged track.
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem400BadRequest'
        404:
          description: Track not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem404NotFound'
        500:
          description: Server error.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem500InternalServerError'
  /tracks/{trackId}/points:
    get:
      tags:
        - points
      summary: Get waypoints of a track.
      operationId: getPoints
      parameters:
        - name: trackId
          in: path
          description: The UUID of the track to be changed.
          required: true
          schema:
            type: string
            format: uuid
        - name: mode
          in: query
          description: >
            Available Modes:
             * `dl` - Forcing download (via Content-Disposition)
          schema:
            type: array
            items:
              type: string
              enum:
                - dl
      responses:
        200:
          description: All waypoints of the track.
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/GeoJsonObject'
        404:
          description: Track not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem404NotFound'
        500:
          description: Server error.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem500InternalServerError'
    put:
      tags:
        - points
      summary: Replaces the waypoints of a track.
      operationId: changePoints
      parameters:
        - name: trackId
          in: path
          description: The UUID of the track to be changed.
          required: true
          schema:
            type: string
            format: uuid
        - name: mode
          in: query
          description: >
            Available Mode:
             * `opt` - Optimize waypoints
          schema:
            type: array
            items:
              type: string
              enum:
                - opt
      requestBody:
        required: true
        content:
          'application/geo+json':
            schema:
              $ref: '#/components/schemas/GeoJsonObject'
      responses:
        200:
          description: Points have been replaced. Returns all waypoints of the track.
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/GeoJsonObject'
        404:
          description: Track not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem404NotFound'
        500:
          description: Server error.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem500InternalServerError'
    patch:
      tags:
        - points
      summary: Changes waypoints of a track.
      description: >
        Merges the waypoints with the existing ones based on UUIDs of the waypoints.
        If there is a waypoint with that UUID already, the waypoint will be replaced.
        If the UUID does not exist the waypoint is added.
        If the new waypoint has no UUID at all, it is given an UUID and added to the list of waypoints.
      operationId: addPoints
      parameters:
        - name: trackId
          in: path
          description: The UUID of the track to be changed.
          required: true
          schema:
            type: string
            format: uuid
        - name: mode
          in: query
          description: >
            Available Mode:
             * `opt` - Optimize waypoints
          schema:
            type: array
            items:
              type: string
              enum:
                - opt
      requestBody:
        required: true
        content:
          'application/geo+json':
            schema:
              $ref: '#/components/schemas/GeoJsonObject'
      responses:
        200:
          description: Points have been replaced. Returns all waypoints of the track.
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/GeoJsonObject'
        404:
          description: Track not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem404NotFound'
        500:
          description: Server error.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem500InternalServerError'
  /tracks/{trackId}/points/{pointId}:
    delete:
      tags:
        - points
      summary: Deletes a waypoint of a track.
      operationId: deletePoint
      parameters:
        - name: trackId
          in: path
          description: The UUID of the track containing the waypoint to be deleted.
          required: true
          schema:
            type: string
            format: uuid
        - name: pointId
          in: path
          description: The UUID of the waypoint to be deleted.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Successful operation.
        404:
          description: Track or waypoint not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem404NotFound'
        500:
          description: Server error.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem500InternalServerError'
  /version:
    get:
      tags:
        - server
      summary: Returns the version of the backend application the server is currently running on.
      operationId: version
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
components:
  schemas:
    Version:
      type: object
      properties:
        app:
          type: string
          example: 0.9.2
          description: Version of the backend application.
        git:
          type: string
          example: 0.9.2-5-g250de68
          description: Local version plus Git hash of the last commit.
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    GeoJsonObject:
      description: GeoJSON base object
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3'
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
        - type

    FeatureGeometry:
      description: Abstract type for all GeoJSON Geometry object.
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3'
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
        - type

    Feature:
      description: GeoJSON Feature object
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.2'
      allOf:
        - $ref: '#/components/schemas/GeoJsonObject'
      type: object
      required:
        - geometry
        - properties
      properties:
        geometry:
          $ref: '#/components/schemas/FeatureGeometry'
        properties:
          type: object
          nullable: true

    FeatureCollection:
      description: GeoJSON FeatureCollection object
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.3'
      allOf:
        - $ref: '#/components/schemas/GeoJsonObject'
      type: object
      required:
        - features
      properties:
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'

    Position:
      description: >
        A position is an array of numbers. There MUST be two or more elements.
        The first two elements are longitude and latitude precisely in that 
        order and using decimal numbers. Altitude or elevation MAY be included
        as an optional third element.
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.1'
      type: array
      minItems: 2
      maxItems: 3
      items:
        type: number

    LineStringCoordinates:
      description: GeoJSon fundamental geometry construct, array of two or more positions.
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.4'
      type: array
      items:
        $ref: '#/components/schemas/Position'
      minItems: 2

    Point:
      description: GeoJSON geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.2'
      allOf:
        - $ref: '#/components/schemas/FeatureGeometry'
      type: object
      required:
        - coordinates
      properties:
        coordinates:
          $ref: '#/components/schemas/Position'

    MultiPoint:
      description: GeoJSON geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.3'
      allOf:
        - $ref: '#/components/schemas/FeatureGeometry'
      type: object
      required:
        - coordinates
      properties:
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/Position'

    LineString:
      description: GeoJSON geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.4'
      allOf:
        - $ref: '#/components/schemas/FeatureGeometry'
      type: object
      required:
        - coordinates
      properties:
        coordinates:
          $ref: '#/components/schemas/LineStringCoordinates'

    MultiLineString:
      description: GeoJSON geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.5'
      allOf:
        - $ref: '#/components/schemas/FeatureGeometry'
      type: object
      required:
        - coordinates
      properties:
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/LineStringCoordinates'
    Problem:
      required:
        - type
        - title
        - status
        - detail
      type: object
      properties:
        type:
          type: string
          example: 'about:blank'
        title:
          type: string
          example: 'Error class'
        status:
          type: integer
          example: 404
        detail:
          type: string
          example: 'Failure message.'
    Problem400BadRequest:
      description: >
        The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax).
        Problem object is based on RFC 7807 (Problem Details for HTTP APIs).
      externalDocs:
        url: https://www.rfc-editor.org/rfc/rfc9110.html#name-400-bad-request
      allOf:
        - $ref: '#/components/schemas/Problem'
    Problem404NotFound:
      description: >
        The origin server did not find a current representation for the target resource.
        Problem object is based on RFC 7807 (Problem Details for HTTP APIs).
      externalDocs:
        url: https://www.rfc-editor.org/rfc/rfc9110.html#name-404-not-found
      allOf:
        - $ref: '#/components/schemas/Problem'
    Problem413PayloadTooLarge:
      description: >
        The server is refusing to process a request because the request content is larger than the server is willing or able to process.
        Problem object is based on RFC 7807 (Problem Details for HTTP APIs).
      externalDocs:
        url: https://www.rfc-editor.org/rfc/rfc9110.html#name-413-content-too-large
      allOf:
        - $ref: '#/components/schemas/Problem'
    Problem500InternalServerError:
      description: >
        The server encountered an unexpected condition that prevented it from fulfilling the request.
        Problem object is based on RFC 7807 (Problem Details for HTTP APIs).
      externalDocs:
        url: https://www.rfc-editor.org/rfc/rfc9110.html#name-500-internal-server-error
      allOf:
        - $ref: '#/components/schemas/Problem'
